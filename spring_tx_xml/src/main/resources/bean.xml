<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="accountDao" class="com.spring.dao.impl.AccountDaoImpl">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <bean id="accountService" class="com.spring.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao"></property>
    </bean>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/db_spring"></property>
        <property name="username" value="root"></property>
        <property name="password" value="admin"></property>
    </bean>

    <!--spring中基于XML的声明式事务控制配制步骤
        1.配置事务管理器
        2.配置事务的通知
            此时需要导入事务的约束，tx名称空间和约束，同时也需要aop的
            使用tx：advice标签配置事务通知
            属性：
                id：事务通知的唯一标识
                transaction-manage：给事务通知提供一个事务管理器引用
        3.配置aop中的通用切入点表达式
        4.建立事务通知和切入点表达式的对应关系
        5.配置事务的属性
            在事务的通知tx：advice标签的内部
    -->
    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--配置事务的通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--配置事务的属性
            isolation：用于指定事务的隔离级别。默认是default，表示使用数据库的默认隔离级别。
            propagation：用于指定事务的传播行为。默认是REQUIRED，标识一定会有事务，增删改的选择。查询方法可以选择SUPPORTS
            read-only：用于指定事务是否可读。只有查询方法才能设置为true，默认是false，表示读写。
            rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值，产生任何异常都回滚
            no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，事务回滚。没有默认值，产生任何异常都回滚
            timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了其他数值，以秒为单位。
        -->
        <tx:attributes>
            <!--所有切入点，不可只读，一定有事务-->
            <tx:method name="*" read-only="false" propagation="REQUIRED"/>
            <!--find开头的方法名只读-->
            <tx:method name="find*" read-only="true" propagation="SUPPORTS"></tx:method>
        </tx:attributes>
    </tx:advice>

    <!--配置aop-->
    <aop:config>
        <!--配置切入点表达式-->
        <aop:pointcut id="tx1" expression="execution(* com.spring.service.impl.*.*(..))"></aop:pointcut>
        <!--建立切入点表达式和事务通知的对应关系-->
        <aop:advisor pointcut-ref="tx1" advice-ref="txAdvice"></aop:advisor>
    </aop:config>
</beans>