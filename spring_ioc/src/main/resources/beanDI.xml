<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--spring中的依赖注入
        依赖注入：Dependency Injection
        Ioc的作用： 降低程序间的耦合(依赖关系)
        依赖关系的管理: 都交给spring来维护
        在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
        依赖关系的维护： 就称为依赖注入
            依赖注入：
                能注入的数据：三类
                    基本类型和String
                    其他bean类型(在配置文件中或注解配置过的bean)
                    复杂类型/集合类型
                注入的方式：
                    第一种：使用构造函数注入
                    第二种：使用set方法注入
                    第三种：使用注解提供
    -->

    <!--构造函数注入方式
            使用的标签：constructor-arg
            标签出现的位置：bean内容
            标签中的属性：
                    type：用于指定要注入的数据的数据类型，该数据类型是构造函数中某个或某些参数的类型
                    index：用于指定要注入的数据在构造函数中指定的索引位置。索引的位置是以0开始
                    name：用于指定给构造函数中指定名称的参数赋值            ！！！比较常用
                    ==========================以上三个用于指定给构造函数中的哪些参数赋值=====================
                    value：用于为注入的数据为基本数据类型和String类型赋值
                    ref：用于为注入的数据类型为其他bean类型赋值，它指的是在spring的Ioc容器中出现过的bean对象
        优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功
        弊端：
            改变了bean对象的实例化方式，使用我们创建对象时，如果用不到这些数据，也必须提供
    -->
    <!--<bean id ="userService" class="com.spring.service.impl.UserServiceImpl">
        &lt;!&ndash;type标签赋值：当构造函数中出现多种一样的数据类型时，配置文件中前面的标签属性为构造函数中前面的参数赋值&ndash;&gt;
      &lt;!&ndash;  <constructor-arg type="java.util.Date" ref="now"></constructor-arg>
        <constructor-arg type="java.lang.String" value="泰斯特"></constructor-arg>
        <constructor-arg type="java.lang.String" value="男"></constructor-arg>
        <constructor-arg type="java.lang.Integer" value="22"></constructor-arg>&ndash;&gt;
        &lt;!&ndash;index标签赋值：需要知道构造函数中每个参数的索引位置&ndash;&gt;
       &lt;!&ndash; <constructor-arg index="1" value="泰斯特"></constructor-arg>
        <constructor-arg index="0" value="男"></constructor-arg>
        <constructor-arg index="2" value="22"></constructor-arg>
        <constructor-arg index="3" ref="now"></constructor-arg>&ndash;&gt;
        &lt;!&ndash;只需要知道构造函数中每个参数的名称即可赋值&ndash;&gt;
        <constructor-arg name="name" value="泰斯特"></constructor-arg>
        <constructor-arg name="sex" value="男"></constructor-arg>
        <constructor-arg name="age" value="22"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>-->

    <!--配置一个获取当前日期的bean-->
    <bean id="now" class="java.util.Date"></bean>

    <!--set方法注入方式           更常用的方式
        标签：property
        标签位置：bean内部
        标签的属性：
            name：用于指定注入时所调用的set方法名称
            value：用于为注入的数据为基本数据类型和String类型赋值
            ref：用于为注入的数据类型为其他bean类型赋值，它指的是在spring的Ioc容器中出现过的bean对象
        优势：创建对象没有明确的限制，可以使用默认的构造函数
        弊端：如果某个成员变量必须有值，则获取对象可能set方法没有执行
    -->
    <bean id="userService" class="com.spring.service.impl.UserServiceImpl">
        <property name="name" value="test"></property>
        <property name="sex" value="男"></property>
        <property name="age" value="22"></property>
        <property name="birthday" ref="now"></property>
    </bean>


    <!--复杂类型的注入/集合类型的注入
        用于给List结构集合注入的标签：
        list、array、set
        用于给Map结构结合注入的标签：
        map、props
        结构相同，标签可以互换
    -->
    <bean id="userDao" class="com.spring.dao.impl.UserDaoImpl">
        <property name="myStr">
            <list>
                <value>111</value>
                <value>222</value>
                <value>AAA</value>
            </list>
        </property>

        <property name="myList">
            <set>
                <value>111</value>
                <value>222</value>
                <value>AAA</value>
            </set>
        </property>

        <property name="mySet">
            <array>
                <value>111</value>
                <value>222</value>
                <value>AAA</value>
            </array>
        </property>

        <property name="myMap">
            <map>
                <entry key="aaa" value="111"></entry>
                <entry key="bbb" value="222"></entry>
                <entry key="ccc" value="333"></entry>
            </map>
        </property>

        <property name="myProps">
            <props>
                <prop key="aaa">111</prop>
                <prop key="bbb">222</prop>
                <prop key="ccc">333</prop>
            </props>
        </property>
    </bean>
</beans>